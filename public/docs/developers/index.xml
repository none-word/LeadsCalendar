<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>My New Hugo Site</title><link>http://localhost:1313/docs/developers/</link><description>Recent content on My New Hugo Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost:1313/docs/developers/index.xml" rel="self" type="application/rss+xml"/><item><title>Api</title><link>http://localhost:1313/docs/developers/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/developers/api/</guid><description>API Documentation - Donation # This document provides an overview of the endpoints available in the Donation Management API.
Base URL # The base URL for all endpoints is /donation.
Authentication # All endpoints in this API require authentication. The user must be logged in, and their token must be included in the request headers.
Headers # Authorization: Bearer YOUR_ACCESS_TOKEN Endpoints # 1. Get All Donations # GET / # Description: Retrieve a list of all donations made by the user.</description></item><item><title>Architecture</title><link>http://localhost:1313/docs/developers/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/developers/architecture/</guid><description> High-Level Architecture #</description></item><item><title>Set up</title><link>http://localhost:1313/docs/developers/set_up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/developers/set_up/</guid><description> Alumni Portal Backend # How to run # Using Python # Clone repository locally or on the server Open a shell/command line in this folder (better if it was after activating a python virtual env) Install the needed python packages pip install -r requirements.txt Run the python script: python3 main.py Using docker # Download docker locally or on the server Here the image tag name is alumni-backend you can name it as you like Also the port in docker is 8000 by default and you can map it to anything as you like docker build -t alumni-backend docker run -p 8000:8000 -d alumni-backend Inno-alumni-portal frontend # How to run or deploy # Clone repository locally or on the server Open a shell/command line in this folder To install all packages (local to the repo) using npm npm install To build the project for production npm run build To start the project on development npm start</description></item><item><title>Technologies</title><link>http://localhost:1313/docs/developers/technologies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/developers/technologies/</guid><description> Frameworks and Technology # Python FastAPI Next.js Docker PostgreSQL</description></item></channel></rss>