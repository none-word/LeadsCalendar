[{"id":0,"href":"/docs/users/overview/","title":"Overview","section":"Users","content":" Overview # The goal of this project is to further empower Innopolis University alumni by optimizing and expanding the services offered through the Alumni Portal. The aim is to provide a seamless and efficient experience for alumni to stay connected with the university, participate in events, manage elective course attendance, and request passes for various purposes.\nObjectives # Streamlined Complaints Handling:\nImprove the process for submitting customer complaints through the Telegram group mentioned on the website. Enhance the responsiveness of administrators in addressing complaints promptly. Efficient Users Data Management:\nEnable administrators to manage user requests more effectively by providing clear feedback on acceptance or denial, including reasons for denial. Implement mechanisms to ensure accurate and secure user data management. Enhanced Pass Order System:\nOptimize the Alumni Portal to facilitate easy and quick pass requests for alumni entering the university for different purposes. Implement features to track and manage pass requests efficiently. Improved Elective Courses Participation:\nEnhance the Alumni Portal\u0026rsquo;s capability to handle requests for elective course attendance seamlessly. Provide alumni with the ability to apply for elective courses with ease, ensuring a user-friendly experience. Expected Outcomes # Increased Alumni Engagement:\nBoost alumni participation in university events and activities through a more user-friendly portal. Foster a sense of community and connection among alumni through efficient complaint resolution and communication. Optimized Administrative Processes:\nReduce administrative workload by streamlining data management processes. Improve decision-making through better feedback and communication channels. Efficient Pass Request Handling:\nMinimize delays in processing pass requests, providing alumni with a smoother experience when entering the university. Enhance security measures related to pass requests for the safety of all stakeholders. Seamless Elective Course Enrollment:\nImprove the ease of elective course participation for alumni. Ensure a straightforward process for applying and attending elective courses through the portal. "},{"id":1,"href":"/docs/users/key_features/","title":"Key Features","section":"Users","content":" Key Features # Customer Complaints: Customers can submit complaints directly through the telegram group mentioed on the website. Users Data Management: Admins are able to accept or deny requests from users with feedback (on reasons for example) Pass Order: Alumni users can request a pass to enter the university for different purposes from the main page of the website Elective Courses Participation Requests: Alumni users can request to attend elective courses held in the university at the time they are applying. Instructions # Login process: # Donations: # Request electives: # Request pass: # Logout process: # Full demo # "},{"id":2,"href":"/docs/users/stakeholders/","title":"Stakeholders","section":"Users","content":" Stakeholders # "},{"id":3,"href":"/docs/developers/api/","title":"Api","section":"Developers","content":" API Documentation - Donation # This document provides an overview of the endpoints available in the Donation Management API.\nBase URL # The base URL for all endpoints is /donation.\nAuthentication # All endpoints in this API require authentication. The user must be logged in, and their token must be included in the request headers.\nHeaders # Authorization: Bearer YOUR_ACCESS_TOKEN Endpoints # 1. Get All Donations # GET / # Description: Retrieve a list of all donations made by the user.\nRequest:\nHeaders: Authorization Response:\nStatus Code: 200 OK Content Type: application/json Body: [ { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34; } }, // ... (more donations) ] 2. Make Donation # POST / # Description: Make a new donation.\nRequest:\nHeaders: Authorization Body: { \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; } Response:\nStatus Code: 201 Created Content Type: application/json Body: { \u0026#34;status\u0026#34;: 201, \u0026#34;detail\u0026#34;: \u0026#34;Donation Successfully created\u0026#34;, \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34; } } } 3. Get Admin Donation Message # GET /admin # Description: Retrieve the latest donation message of type \u0026ldquo;ADMIN\u0026rdquo;.\nRequest:\nHeaders: Authorization Response:\nStatus Code: 200 OK Content Type: application/json Body: { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;string\u0026#34; } 4. Update Admin Donation Message # POST /admin # Description: Update the donation message of type \u0026ldquo;ADMIN\u0026rdquo;. If the message does not exist, it will be created.\nRequest:\nHeaders: Authorization Body: { \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34; } Response:\nStatus Code: 202 Accepted Content Type: application/json Body: { \u0026#34;status\u0026#34;: 202, \u0026#34;detail\u0026#34;: \u0026#34;Donation Successfully created\u0026#34;, \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;string\u0026#34; } } Error Responses # 401 Unauthorized: Missing or invalid authentication token. 404 Not Found: Resource not found. 422 Unprocessable Entity: Invalid input or missing required fields. 500 Internal Server Error: Server-side error. API Documentation - Elective Courses # Base URL # The base URL for all endpoints is /elective_course.\nAuthentication # All endpoints in this API require authentication. The user must be logged in, and their token must be included in the request headers.\nHeaders # Authorization: Bearer YOUR_ACCESS_TOKEN Endpoints # 1. Get All Elective Courses # GET / # Description: Retrieve a list of all available elective courses.\nRequest:\nHeaders: Authorization Response:\nStatus Code: 200 OK Content Type: application/json Body: [ { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;course_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;instructor_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;string\u0026#34; }, // ... (more elective courses) ] 2. Get All Elective Courses by Admin # GET /admin # Description: Retrieve a list of all elective courses (admin access).\nRequest:\nHeaders: Authorization Response:\nStatus Code: 200 OK Content Type: application/json Body: [ { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;course_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;instructor_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;string\u0026#34; }, // ... (more elective courses) ] 3. Get Booked Elective Courses # GET /booked # Description: Retrieve a list of elective courses booked by the user.\nRequest:\nHeaders: Authorization Response:\nStatus Code: 200 OK Content Type: application/json Body: [ { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;course_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;instructor_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;elective_course\u0026#34;: { // elective course details } }, // ... (more booked elective courses) ] 4. Get All Elective Requests # GET /request # Description: Retrieve a list of all elective course requests.\nRequest:\nHeaders: Authorization Response:\nStatus Code: 200 OK Content Type: application/json Body: [ { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;user\u0026#34;: { // user details }, \u0026#34;elective_course\u0026#34;: { // elective course details }, \u0026#34;status\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;string\u0026#34; }, // ... (more elective course requests) ] 5. Create Elective Course # POST / # Description: Create a new elective course.\nRequest:\nHeaders: Authorization Body: { \u0026#34;course_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;instructor_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;string\u0026#34; } Response:\nStatus Code: 201 Created Content Type: application/json Body: { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;course_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;instructor_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;string\u0026#34; } 6. Bulk Create Elective Courses # POST /bulk # Description: Bulk create multiple elective courses.\nRequest:\nHeaders: Authorization Body: [ { // elective course details }, // ... (more elective courses) ] Response:\nStatus Code: 201 Created Content Type: application/json Body: { \u0026#34;number_added\u0026#34;: 5 } 7. Update Elective Course # PUT / # Description: Update an existing elective course.\nRequest:\nHeaders: Authorization Body: { \u0026#34;course_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;instructor_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;string\u0026#34; } Response:\nStatus Code: 200 OK Content Type: application/json Body: { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;course_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;instructor_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;string\u0026#34; } 8. Delete Elective Course # DELETE /remove # Description: Delete an elective course.\nRequest:\nHeaders: Authorization Response:\nStatus Code: 200 OK Content Type: application/json Body: { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;course_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;instructor_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;string\u0026#34; } 9. Disconnect Elective Course Request # DELETE / # Description: Disconnect an elective course request.\nRequest:\nHeaders: Authorization Response:\nStatus Code: 200 OK Content Type: application/json Body: { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;course_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;instructor_name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;string\u0026#34; } 10. Request Elective Course # POST /request # Description: Request an elective course.\nRequest:\nHeaders: Authorization Body: { \u0026#34;course_id\u0026#34;: \u0026#34;string\u0026#34; } Response:\nStatus Code: 201 Created\nContent Type: application/json Body: { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;course_id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;string\u0026#34; } 11. Update Elective Request # PATCH / # Description: Update an elective course request.\nRequest:\nHeaders: Authorization Body: { \u0026#34;status\u0026#34;: \u0026#34;string\u0026#34; } Response:\nStatus Code: 200 OK Content Type: application/json Body: { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;user\u0026#34;: { // user details }, \u0026#34;elective_course\u0026#34;: { // elective course details }, \u0026#34;status\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;string\u0026#34; } API Documentation - Obtain Pass # Base URL # The base URL for all endpoints is /request_pass.\nAuthentication # All endpoints in this API require authentication. The user must be logged in, and their token must be included in the request headers.\nHeaders # Authorization: Bearer YOUR_ACCESS_TOKEN Endpoints # 1. Get All Pass Requests # GET / # Description: Retrieve a list of all pass requests made by the user.\nRequest:\nHeaders: Authorization Response:\nStatus Code: 200 OK Content Type: application/json Body: [ { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;requested_date\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;guest_info\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;string\u0026#34; }, // ... (more pass requests) ] 2. Get All Pass Requests by Admin # GET /admin # Description: Retrieve a list of all pass requests (admin access).\nRequest:\nHeaders: Authorization Response:\nStatus Code: 200 OK Content Type: application/json Body: [ { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;user\u0026#34;: { // user details }, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;requested_date\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;guest_info\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;string\u0026#34; }, // ... (more pass requests) ] 3. Update Elective Request # PATCH / # Description: Update an existing pass request.\nRequest:\nHeaders: Authorization Body: { \u0026#34;status\u0026#34;: \u0026#34;string\u0026#34; } Response:\nStatus Code: 200 OK Content Type: application/json Body: { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;user\u0026#34;: { // user details }, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;requested_date\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;guest_info\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;string\u0026#34; } 4. Order Pass # POST / # Description: Create a new pass order.\nRequest:\nHeaders: Authorization Body: { \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;requested_date\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;guests\u0026#34;: [\u0026#34;string\u0026#34;, \u0026#34;string\u0026#34;] } Response:\nStatus Code: 201 Created Content Type: application/json Body: { \u0026#34;status\u0026#34;: 201, \u0026#34;detail\u0026#34;: \u0026#34;Successfully created pass order\u0026#34;, \u0026#34;data\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;requested_date\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;guest_info\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;string\u0026#34; } } 5. Disconnect Pass Request # DELETE / # Description: Disconnect a pass request.\nRequest:\nHeaders: Authorization Response:\nStatus Code: 200 OK Content Type: application/json Body: { \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;user_id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;requested_date\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;guest_info\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;string\u0026#34; } Certainly! Here\u0026rsquo;s the Markdown representation of the API documentation for the provided FastAPI code:\nAPI Documentation - User Authentication # Base URL # The base URL for all endpoints is /user.\nAuthentication # Authentication is required for certain endpoints. The user must be logged in, and their token must be included in the request headers.\nHeaders # Authorization: Bearer YOUR_ACCESS_TOKEN Endpoints # 1. Login Alumni # POST /login # Description: Login for alumni users.\nRequest:\nBody: { \u0026#34;username\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34; } Response:\nStatus Code: 200 OK Content Type: application/json Body: { \u0026#34;access_token\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;token_type\u0026#34;: \u0026#34;bearer\u0026#34; } 2. Register Alumni Account # POST /register # Description: Register a new alumni account.\nRequest:\nBody: { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;confirm_password\u0026#34;: \u0026#34;string\u0026#34; } Response:\nStatus Code: 201 Created Content Type: application/json Body: { \u0026#34;status\u0026#34;: 201, \u0026#34;message\u0026#34;: \u0026#34;Successfully registered user\u0026#34; } 3. Register Admin Account # POST /register-admin # Description: Register a new admin account.\nRequest:\nBody: { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;string\u0026#34; } Response:\nStatus Code: 201 Created Content Type: application/json Body: { // user details } 4. Update Alumni Account # POST /update # Description: Update alumni account information.\nRequest:\nBody: { // user details to update } Response:\nStatus Code: 201 Created Content Type: application/json Body: { // updated user details } 5. Update Password # POST /update-password # Description: Update alumni account password.\nRequest:\nBody: { \u0026#34;current_password\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;new_password\u0026#34;: \u0026#34;string\u0026#34; } Response:\nStatus Code: 202 Accepted Content Type: application/json Body: { \u0026#34;status\u0026#34;: 202, \u0026#34;message\u0026#34;: \u0026#34;Successfully updated password\u0026#34; } 6. Get Current Alumni # GET / # Description: Retrieve details of the currently logged-in alumni.\nResponse:\nStatus Code: 200 OK Content Type: application/json Body: { // user details } 7. Get All Registered Alumni # GET /all # Description: Retrieve details of all registered alumni.\nResponse:\nStatus Code: 200 OK Content Type: application/json Body: [ { // user details with statistics }, // ... (more alumni) ] 8. Forgot Password # POST /forgot-password # Description: Request a password reset for a registered user.\nRequest:\nBody: { \u0026#34;university_email\u0026#34;: \u0026#34;string\u0026#34; } Response:\nStatus Code: 200 OK 9. Verify Account # POST /verify-account # Description: Verify a user\u0026rsquo;s account.\nRequest:\nBody: { \u0026#34;university_email\u0026#34;: \u0026#34;string\u0026#34; } Response:\nStatus Code: 200 OK 10. Confirm Verification # POST /confirm_verification # Description: Confirm user verification.\nRequest:\nBody: { \u0026#34;email\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;string\u0026#34; } Response:\nStatus Code: 200 OK 11. Login with SSO # GET /login_sso # Description: Initiate login with Single Sign-On (SSO).\nResponse:\nRedirects to the SSO provider for authentication. 12. SSO Token Callback # GET /token_sso # Description: Callback endpoint for handling SSO token.\n13. SSO User Callback # GET /user_sso # Description: Callback endpoint for handling SSO user information.\n14. SSO Authentication Callback # GET /callback # Description: Callback endpoint for completing SSO authentication.\n"},{"id":4,"href":"/docs/developers/architecture/","title":"Architecture","section":"Developers","content":" High-Level Architecture # "},{"id":5,"href":"/docs/developers/set_up/","title":"Set up","section":"Developers","content":" Alumni Portal Backend # How to run # Using Python # Clone repository locally or on the server Open a shell/command line in this folder (better if it was after activating a python virtual env) Install the needed python packages pip install -r requirements.txt Run the python script: python3 main.py Using docker # Download docker locally or on the server Here the image tag name is alumni-backend you can name it as you like Also the port in docker is 8000 by default and you can map it to anything as you like docker build -t alumni-backend docker run -p 8000:8000 -d alumni-backend Inno-alumni-portal frontend # How to run or deploy # Clone repository locally or on the server Open a shell/command line in this folder To install all packages (local to the repo) using npm npm install To build the project for production npm run build To start the project on development npm start "},{"id":6,"href":"/docs/developers/technologies/","title":"Technologies","section":"Developers","content":" Frameworks and Technology # Python FastAPI Next.js Docker PostgreSQL "}]